const fs = require('fs')
const _ = require('./utils')

function createRenderer(bundle, template) {
  return require('vue-server-renderer').createBundleRenderer(bundle, {
    template,
    cache: require('lru-cache')({
      max: 1000,
      maxAge: 1000 * 60 * 15
    })
  })
}


module.exports = (app, options = {}) => {
  const express = require('express')
  const compression = require('compression')

  const dev = options.dev
  const cwd = options.cwd || process.cwd()

  const serve = (path, cache) => express.static(_.cwd(cwd, path), {
    maxAge: cache && !dev ? 60 * 60 * 24 * 30 : 0
  })

  const postCompile = stats => {
    if (stats.server && !stats.client) {
      if (stats.server.hasErrors() || stats.server.hasWarnings()) {
        process.exitCode = 1
        console.log(stats.server.toString('errors-only'))
      } else {
        process.exitCode = 0
        return
      }
    }

    process.stdout.write('\x1Bc')

    const statsOption = {
      children: false,
      chunks: false,
      modules: false,
      colors: true
    }
    if (stats.client) {
      if (stats.client.hasErrors() || stats.client.hasWarnings()) {
        console.error(stats.client.toString('errors-only'))
        process.exitCode = 1
      } else {
        console.log(stats.client.toString(statsOption))
        process.exitCode = 0
      }
    }
    options.postCompile && options.postCompile()
  }

  let renderer

  const serverInfo =
    `express/${require('express/package.json').version} ` +
    `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

  app.use('/public', serve('public', true))
  app.use('/dist', serve('dist', true))

  if (dev && !renderer) {
    // In development: setup the dev server with watch and hot-reload,
    // and create a new renderer on bundle / index template update.
    console.log('> Starting development server')
    require('./setup-dev-server')({
      app,
      cwd,
      dev,
      html: options.html
    }, (bundle, template, stats) => {
      postCompile(stats)
      renderer = createRenderer(bundle, template)
    })
  }

  if (!dev && !renderer) {
    console.log('> Starting production server')
    require('./build')({
      cwd,
      html: options.html
    }).then(stats => {
      postCompile({ client: stats[0], server: stats[1] })
      // In production: create server renderer using server bundle and index HTML
      // template from real fs.
      // The server bundle is generated by vue-ssr-webpack-plugin.
      const bundle = require(_.cwd(cwd, './dist/vue-ssr-bundle.json'))
      // src/index.template.html is processed by html-webpack-plugin to inject
      // build assets and output as dist/index.html.
      const template = fs.readFileSync(_.cwd(cwd, './dist/index.html'), 'utf-8')
      renderer = createRenderer(bundle, template)
    })
  }

  app.get('*', (req, res) => {
    app.use(compression({ threshold: 0 }))

    if (!renderer) {
      return res.end('waiting for compilation... refresh in a moment.')
    }

    const s = Date.now()

    res.setHeader('Content-Type', 'text/html')
    res.setHeader('Server', serverInfo)

    const errorHandler = err => {
      if (err && err.code === 404) {
        res.status(404).end('404 | Page Not Found')
      } else {
        // Render Error Page or Redirect
        res.status(500).end('500 | Internal Server Error')
        console.error(`error during render : ${req.url}`)
        console.error(err)
      }
    }

    renderer.renderToStream({ url: req.url })
      .on('error', errorHandler)
      .on('end', () => console.log(`whole request: ${Date.now() - s}ms`))
      .pipe(res)
  })
}
