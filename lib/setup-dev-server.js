const path = require('path')
const webpack = require('webpack')
const MFS = require('memory-fs')
const createConfig = require('./create-config')

module.exports = function ({
  app,
  dev,
  cwd
}, cb) {
  const clientConfig = createConfig({
    type: 'client',
    dev,
    cwd,
  }).toConfig()

  const serverConfig = createConfig({
    type: 'server',
    dev,
    cwd,
  }).toConfig()

  let bundle
  let template

  // dev middleware
  let clientCompiler
  let serverCompiler
  try {
    clientCompiler = webpack(clientConfig)
    serverCompiler = webpack(serverConfig)
  } catch (err) {
    if (err.name === 'WebpackOptionsValidationError') {
      console.log(err.message)
      process.exit(1) // eslint-disable-line unicorn/no-process-exit
    }
  }

  const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    quiet: true
  })
  app.use(devMiddleware)

  clientCompiler.plugin('done', clientStats => {
    const fs = devMiddleware.fileSystem
    const filePath = path.join(clientConfig.output.path, 'index.html')
    if (fs.existsSync(filePath)) {
      template = fs.readFileSync(filePath, 'utf-8')
      if (bundle) {
        cb(bundle, template, {
          client: clientStats
        })
      }
    }
  })

  // hot middleware
  app.use(require('webpack-hot-middleware')(clientCompiler, {
    log: () => {}
  }))

  // watch and update server renderer
  const mfs = new MFS()
  serverCompiler.outputFileSystem = mfs
  serverCompiler.watch({}, (err, serverStats) => {
    if (err) throw err
    // read bundle generated by vue-ssr-webpack-plugin
    const bundlePath = path.join(serverConfig.output.path, 'vue-ssr-bundle.json')
    bundle = JSON.parse(mfs.readFileSync(bundlePath, 'utf-8'))
    if (template) {
      cb(bundle, template, {
        server: serverStats
      })
    }
  })
}
